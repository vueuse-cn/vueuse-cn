import{_ as e,a as t,b as r}from"./chunks/FunctionInfo.bad951e4.js";import{_ as c,o as y,c as A,b as n,e as B,a as s,d as a}from"./app.28320a3a.js";import"./chunks/utils.e9c2f9be.js";const U=JSON.parse('{"title":"createUnrefFn","description":"","frontmatter":{"category":"Utilities","related":"reactify"},"headers":[{"level":2,"title":"Usage","slug":"usage"},{"level":2,"title":"Type Declarations","slug":"type-declarations"},{"level":2,"title":"Source","slug":"source"},{"level":2,"title":"Contributors","slug":"contributors"},{"level":2,"title":"Changelog","slug":"changelog"}],"relativePath":"core/createUnrefFn/index.md"}'),i={name:"core/createUnrefFn/index.md"},D=B(`<h1 id="createunreffn" tabindex="-1">createUnrefFn <a class="header-anchor" href="#createunreffn" aria-hidden="true">#</a></h1><p>Make a plain function accepting ref and raw values as arguments. Returns the same value the unconverted function returns, with proper typing.</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>Make sure you&#39;re using the right tool for the job. Using <code>reactify</code> might be more pertinent in some cases where you want to evaluate the function on each changes of it&#39;s arguments.</p></div><h2 id="usage" tabindex="-1">Usage <a class="header-anchor" href="#usage" aria-hidden="true">#</a></h2><div class="language-ts"><span class="copy"></span><pre class="vp-code-dark"><code><span class="line"><span style="color:#4D9375;">import</span><span style="color:#DBD7CA;"> </span><span style="color:#858585;">{</span><span style="color:#DBD7CA;"> </span><span style="color:#B8A965;">ref</span><span style="color:#DBD7CA;"> </span><span style="color:#858585;">}</span><span style="color:#DBD7CA;"> </span><span style="color:#4D9375;">from</span><span style="color:#DBD7CA;"> </span><span style="color:#C98A7D;">&#39;vue&#39;</span></span>
<span class="line"><span style="color:#4D9375;">import</span><span style="color:#DBD7CA;"> </span><span style="color:#858585;">{</span><span style="color:#DBD7CA;"> </span><span style="color:#B8A965;">createUnrefFn</span><span style="color:#DBD7CA;"> </span><span style="color:#858585;">}</span><span style="color:#DBD7CA;"> </span><span style="color:#4D9375;">from</span><span style="color:#DBD7CA;"> </span><span style="color:#C98A7D;">&#39;@vueuse/core&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#CB7676;">const</span><span style="color:#DBD7CA;"> </span><span style="color:#D4976C;">url</span><span style="color:#DBD7CA;"> </span><span style="color:#CB7676;">=</span><span style="color:#DBD7CA;"> </span><span style="color:#A1B567;">ref</span><span style="color:#858585;">(</span><span style="color:#C98A7D;">&#39;https://httpbin.org/post&#39;</span><span style="color:#858585;">)</span></span>
<span class="line"><span style="color:#CB7676;">const</span><span style="color:#DBD7CA;"> </span><span style="color:#D4976C;">data</span><span style="color:#DBD7CA;"> </span><span style="color:#CB7676;">=</span><span style="color:#DBD7CA;"> </span><span style="color:#A1B567;">ref</span><span style="color:#858585;">({</span><span style="color:#DBD7CA;"> </span><span style="color:#E0A569;">foo</span><span style="color:#858585;">:</span><span style="color:#DBD7CA;"> </span><span style="color:#C98A7D;">&#39;bar&#39;</span><span style="color:#DBD7CA;"> </span><span style="color:#858585;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#CB7676;">const</span><span style="color:#DBD7CA;"> </span><span style="color:#A1B567;">post</span><span style="color:#DBD7CA;"> </span><span style="color:#CB7676;">=</span><span style="color:#DBD7CA;"> </span><span style="color:#858585;">(</span><span style="color:#B8A965;">url</span><span style="color:#858585;">,</span><span style="color:#DBD7CA;"> </span><span style="color:#B8A965;">data</span><span style="color:#858585;">)</span><span style="color:#DBD7CA;"> </span><span style="color:#CB7676;">=&gt;</span><span style="color:#DBD7CA;"> </span><span style="color:#A1B567;">fetch</span><span style="color:#858585;">(</span><span style="color:#B8A965;">url</span><span style="color:#858585;">,</span><span style="color:#DBD7CA;"> </span><span style="color:#858585;">{</span><span style="color:#DBD7CA;"> </span><span style="color:#B8A965;">data</span><span style="color:#DBD7CA;"> </span><span style="color:#858585;">})</span></span>
<span class="line"><span style="color:#CB7676;">const</span><span style="color:#DBD7CA;"> </span><span style="color:#D4976C;">unrefPost</span><span style="color:#DBD7CA;"> </span><span style="color:#CB7676;">=</span><span style="color:#DBD7CA;"> </span><span style="color:#A1B567;">createUnrefFn</span><span style="color:#858585;">(</span><span style="color:#B8A965;">post</span><span style="color:#858585;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A1B567;">post</span><span style="color:#858585;">(</span><span style="color:#B8A965;">url</span><span style="color:#858585;">,</span><span style="color:#DBD7CA;"> </span><span style="color:#B8A965;">data</span><span style="color:#858585;">)</span><span style="color:#DBD7CA;"> </span><span style="color:#758575;">/* \u274C Will throw an error because the arguments are refs */</span></span>
<span class="line"><span style="color:#A1B567;">unrefPost</span><span style="color:#858585;">(</span><span style="color:#B8A965;">url</span><span style="color:#858585;">,</span><span style="color:#DBD7CA;"> </span><span style="color:#B8A965;">data</span><span style="color:#858585;">)</span><span style="color:#DBD7CA;"> </span><span style="color:#758575;">/* \u2714\uFE0F Will Work because the arguments will be auto unref */</span></span>
<span class="line"></span></code></pre><pre class="vp-code-light"><code><span class="line"><span style="color:#1C6B48;">import</span><span style="color:#393A34;"> </span><span style="color:#8E8F8B;">{</span><span style="color:#393A34;"> </span><span style="color:#8C862B;">ref</span><span style="color:#393A34;"> </span><span style="color:#8E8F8B;">}</span><span style="color:#393A34;"> </span><span style="color:#1C6B48;">from</span><span style="color:#393A34;"> </span><span style="color:#B56959;">&#39;vue&#39;</span></span>
<span class="line"><span style="color:#1C6B48;">import</span><span style="color:#393A34;"> </span><span style="color:#8E8F8B;">{</span><span style="color:#393A34;"> </span><span style="color:#8C862B;">createUnrefFn</span><span style="color:#393A34;"> </span><span style="color:#8E8F8B;">}</span><span style="color:#393A34;"> </span><span style="color:#1C6B48;">from</span><span style="color:#393A34;"> </span><span style="color:#B56959;">&#39;@vueuse/core&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#AB5959;">const</span><span style="color:#393A34;"> </span><span style="color:#A65E2B;">url</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">=</span><span style="color:#393A34;"> </span><span style="color:#6C7834;">ref</span><span style="color:#8E8F8B;">(</span><span style="color:#B56959;">&#39;https://httpbin.org/post&#39;</span><span style="color:#8E8F8B;">)</span></span>
<span class="line"><span style="color:#AB5959;">const</span><span style="color:#393A34;"> </span><span style="color:#A65E2B;">data</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">=</span><span style="color:#393A34;"> </span><span style="color:#6C7834;">ref</span><span style="color:#8E8F8B;">({</span><span style="color:#393A34;"> </span><span style="color:#B58451;">foo</span><span style="color:#8E8F8B;">:</span><span style="color:#393A34;"> </span><span style="color:#B56959;">&#39;bar&#39;</span><span style="color:#393A34;"> </span><span style="color:#8E8F8B;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#AB5959;">const</span><span style="color:#393A34;"> </span><span style="color:#6C7834;">post</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">=</span><span style="color:#393A34;"> </span><span style="color:#8E8F8B;">(</span><span style="color:#8C862B;">url</span><span style="color:#8E8F8B;">,</span><span style="color:#393A34;"> </span><span style="color:#8C862B;">data</span><span style="color:#8E8F8B;">)</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">=&gt;</span><span style="color:#393A34;"> </span><span style="color:#6C7834;">fetch</span><span style="color:#8E8F8B;">(</span><span style="color:#8C862B;">url</span><span style="color:#8E8F8B;">,</span><span style="color:#393A34;"> </span><span style="color:#8E8F8B;">{</span><span style="color:#393A34;"> </span><span style="color:#8C862B;">data</span><span style="color:#393A34;"> </span><span style="color:#8E8F8B;">})</span></span>
<span class="line"><span style="color:#AB5959;">const</span><span style="color:#393A34;"> </span><span style="color:#A65E2B;">unrefPost</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">=</span><span style="color:#393A34;"> </span><span style="color:#6C7834;">createUnrefFn</span><span style="color:#8E8F8B;">(</span><span style="color:#8C862B;">post</span><span style="color:#8E8F8B;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6C7834;">post</span><span style="color:#8E8F8B;">(</span><span style="color:#8C862B;">url</span><span style="color:#8E8F8B;">,</span><span style="color:#393A34;"> </span><span style="color:#8C862B;">data</span><span style="color:#8E8F8B;">)</span><span style="color:#393A34;"> </span><span style="color:#A0ADA0;">/* \u274C Will throw an error because the arguments are refs */</span></span>
<span class="line"><span style="color:#6C7834;">unrefPost</span><span style="color:#8E8F8B;">(</span><span style="color:#8C862B;">url</span><span style="color:#8E8F8B;">,</span><span style="color:#393A34;"> </span><span style="color:#8C862B;">data</span><span style="color:#8E8F8B;">)</span><span style="color:#393A34;"> </span><span style="color:#A0ADA0;">/* \u2714\uFE0F Will Work because the arguments will be auto unref */</span></span>
<span class="line"></span></code></pre></div><h2 id="type-declarations" tabindex="-1">Type Declarations <a class="header-anchor" href="#type-declarations" aria-hidden="true">#</a></h2><div class="language-typescript"><span class="copy"></span><pre class="vp-code-dark"><code><span class="line"><span style="color:#4D9375;">export</span><span style="color:#DBD7CA;"> </span><span style="color:#CB7676;">declare</span><span style="color:#DBD7CA;"> </span><span style="color:#CB7676;">type</span><span style="color:#DBD7CA;"> </span><span style="color:#A1B567;">UnrefFn</span><span style="color:#858585;">&lt;</span><span style="color:#A1B567;">T</span><span style="color:#858585;">&gt;</span><span style="color:#DBD7CA;"> </span><span style="color:#CB7676;">=</span><span style="color:#DBD7CA;"> </span><span style="color:#A1B567;">T</span><span style="color:#DBD7CA;"> </span><span style="color:#CB7676;">extends</span><span style="color:#DBD7CA;"> </span><span style="color:#858585;">(</span><span style="color:#CB7676;">...</span><span style="color:#B8A965;">args</span><span style="color:#CB7676;">:</span><span style="color:#DBD7CA;"> </span><span style="color:#CB7676;">infer</span><span style="color:#DBD7CA;"> </span><span style="color:#A1B567;">A</span><span style="color:#858585;">)</span><span style="color:#DBD7CA;"> </span><span style="color:#CB7676;">=&gt;</span><span style="color:#DBD7CA;"> </span><span style="color:#CB7676;">infer</span><span style="color:#DBD7CA;"> </span><span style="color:#A1B567;">R</span></span>
<span class="line"><span style="color:#DBD7CA;">  </span><span style="color:#CB7676;">?</span><span style="color:#DBD7CA;"> </span><span style="color:#858585;">(</span></span>
<span class="line"><span style="color:#DBD7CA;">      </span><span style="color:#CB7676;">...</span><span style="color:#B8A965;">args</span><span style="color:#CB7676;">:</span><span style="color:#DBD7CA;"> </span><span style="color:#858585;">{</span></span>
<span class="line"><span style="color:#DBD7CA;">        </span><span style="color:#858585;">[</span><span style="color:#A1B567;">K</span><span style="color:#DBD7CA;"> </span><span style="color:#CB7676;">in</span><span style="color:#DBD7CA;"> </span><span style="color:#CB7676;">keyof</span><span style="color:#DBD7CA;"> </span><span style="color:#A1B567;">A</span><span style="color:#858585;">]</span><span style="color:#CB7676;">:</span><span style="color:#DBD7CA;"> </span><span style="color:#A1B567;">MaybeRef</span><span style="color:#858585;">&lt;</span><span style="color:#A1B567;">A</span><span style="color:#858585;">[</span><span style="color:#A1B567;">K</span><span style="color:#858585;">]&gt;</span></span>
<span class="line"><span style="color:#DBD7CA;">      </span><span style="color:#858585;">}</span></span>
<span class="line"><span style="color:#DBD7CA;">    </span><span style="color:#858585;">)</span><span style="color:#DBD7CA;"> </span><span style="color:#CB7676;">=&gt;</span><span style="color:#DBD7CA;"> </span><span style="color:#A1B567;">R</span></span>
<span class="line"><span style="color:#DBD7CA;">  </span><span style="color:#CB7676;">:</span><span style="color:#DBD7CA;"> </span><span style="color:#E0A569;">never</span></span>
<span class="line"><span style="color:#758575;">/**</span></span>
<span class="line"><span style="color:#758575;"> * Make a plain function accepting ref and raw values as arguments.</span></span>
<span class="line"><span style="color:#758575;"> * Returns the same value the unconverted function returns, with proper typing.</span></span>
<span class="line"><span style="color:#758575;"> */</span></span>
<span class="line"><span style="color:#4D9375;">export</span><span style="color:#DBD7CA;"> </span><span style="color:#CB7676;">declare</span><span style="color:#DBD7CA;"> </span><span style="color:#CB7676;">const</span><span style="color:#DBD7CA;"> </span><span style="color:#A1B567;">createUnrefFn</span><span style="color:#CB7676;">:</span><span style="color:#DBD7CA;"> </span><span style="color:#858585;">&lt;</span><span style="color:#A1B567;">T</span><span style="color:#DBD7CA;"> </span><span style="color:#CB7676;">extends</span><span style="color:#DBD7CA;"> </span><span style="color:#A1B567;">Function</span><span style="color:#858585;">&gt;(</span><span style="color:#B8A965;">fn</span><span style="color:#CB7676;">:</span><span style="color:#DBD7CA;"> </span><span style="color:#A1B567;">T</span><span style="color:#858585;">)</span><span style="color:#DBD7CA;"> </span><span style="color:#CB7676;">=&gt;</span><span style="color:#DBD7CA;"> </span><span style="color:#A1B567;">UnrefFn</span><span style="color:#858585;">&lt;</span><span style="color:#A1B567;">T</span><span style="color:#858585;">&gt;</span></span>
<span class="line"></span></code></pre><pre class="vp-code-light"><code><span class="line"><span style="color:#1C6B48;">export</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">declare</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">type</span><span style="color:#393A34;"> </span><span style="color:#6C7834;">UnrefFn</span><span style="color:#8E8F8B;">&lt;</span><span style="color:#6C7834;">T</span><span style="color:#8E8F8B;">&gt;</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">=</span><span style="color:#393A34;"> </span><span style="color:#6C7834;">T</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">extends</span><span style="color:#393A34;"> </span><span style="color:#8E8F8B;">(</span><span style="color:#AB5959;">...</span><span style="color:#8C862B;">args</span><span style="color:#AB5959;">:</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">infer</span><span style="color:#393A34;"> </span><span style="color:#6C7834;">A</span><span style="color:#8E8F8B;">)</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">=&gt;</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">infer</span><span style="color:#393A34;"> </span><span style="color:#6C7834;">R</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#AB5959;">?</span><span style="color:#393A34;"> </span><span style="color:#8E8F8B;">(</span></span>
<span class="line"><span style="color:#393A34;">      </span><span style="color:#AB5959;">...</span><span style="color:#8C862B;">args</span><span style="color:#AB5959;">:</span><span style="color:#393A34;"> </span><span style="color:#8E8F8B;">{</span></span>
<span class="line"><span style="color:#393A34;">        </span><span style="color:#8E8F8B;">[</span><span style="color:#6C7834;">K</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">in</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">keyof</span><span style="color:#393A34;"> </span><span style="color:#6C7834;">A</span><span style="color:#8E8F8B;">]</span><span style="color:#AB5959;">:</span><span style="color:#393A34;"> </span><span style="color:#6C7834;">MaybeRef</span><span style="color:#8E8F8B;">&lt;</span><span style="color:#6C7834;">A</span><span style="color:#8E8F8B;">[</span><span style="color:#6C7834;">K</span><span style="color:#8E8F8B;">]&gt;</span></span>
<span class="line"><span style="color:#393A34;">      </span><span style="color:#8E8F8B;">}</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#8E8F8B;">)</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">=&gt;</span><span style="color:#393A34;"> </span><span style="color:#6C7834;">R</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#AB5959;">:</span><span style="color:#393A34;"> </span><span style="color:#B58451;">never</span></span>
<span class="line"><span style="color:#A0ADA0;">/**</span></span>
<span class="line"><span style="color:#A0ADA0;"> * Make a plain function accepting ref and raw values as arguments.</span></span>
<span class="line"><span style="color:#A0ADA0;"> * Returns the same value the unconverted function returns, with proper typing.</span></span>
<span class="line"><span style="color:#A0ADA0;"> */</span></span>
<span class="line"><span style="color:#1C6B48;">export</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">declare</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">const</span><span style="color:#393A34;"> </span><span style="color:#6C7834;">createUnrefFn</span><span style="color:#AB5959;">:</span><span style="color:#393A34;"> </span><span style="color:#8E8F8B;">&lt;</span><span style="color:#6C7834;">T</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">extends</span><span style="color:#393A34;"> </span><span style="color:#6C7834;">Function</span><span style="color:#8E8F8B;">&gt;(</span><span style="color:#8C862B;">fn</span><span style="color:#AB5959;">:</span><span style="color:#393A34;"> </span><span style="color:#6C7834;">T</span><span style="color:#8E8F8B;">)</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">=&gt;</span><span style="color:#393A34;"> </span><span style="color:#6C7834;">UnrefFn</span><span style="color:#8E8F8B;">&lt;</span><span style="color:#6C7834;">T</span><span style="color:#8E8F8B;">&gt;</span></span>
<span class="line"></span></code></pre></div><h2 id="source" tabindex="-1">Source <a class="header-anchor" href="#source" aria-hidden="true">#</a></h2>`,8),C=s("p",null,[s("a",{href:"https://github.com/vueuse/vueuse/blob/main/packages/core/createUnrefFn/index.ts",target:"_blank",rel:"noopener noreferrer"},"Source"),a(" \u2022 "),s("a",{href:"https://github.com/vueuse/vueuse/blob/main/packages/core/createUnrefFn/index.md",target:"_blank",rel:"noopener noreferrer"},"Docs")],-1),u=s("h2",{id:"contributors",tabindex:"-1"},[a("Contributors "),s("a",{class:"header-anchor",href:"#contributors","aria-hidden":"true"},"#")],-1),d=s("h2",{id:"changelog",tabindex:"-1"},[a("Changelog "),s("a",{class:"header-anchor",href:"#changelog","aria-hidden":"true"},"#")],-1);function f(h,g,F,E,m,_){const l=e,p=t,o=r;return y(),A("div",null,[D,n(l,{fn:"createUnrefFn"}),C,u,n(p,{fn:"createUnrefFn"}),d,n(o,{fn:"createUnrefFn"})])}var T=c(i,[["render",f]]);export{U as __pageData,T as default};
